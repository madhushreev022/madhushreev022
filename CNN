from google.colab.patches import cv2_imshow
import torch
import torchvision
from torchvision.transforms import functional as F
import cv2
import numpy as np
import time

model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
model.eval()

COCO_INSTANCE_CATEGORY_NAMES = [
    'N/A', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train',
    'truck', 'boat', 'traffic light', 'fire hydrant', 'N/A', 'stop sign', 'parking meter',
    'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra',
    'giraffe', 'N/A', 'backpack', 'umbrella', 'N/A', 'handbag', 'tie', 'suitcase', 'frisbee',
    'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard',
    'surfboard', 'tennis racket', 'bottle', 'N/A', 'wine glass', 'cup', 'fork', 'knife', 'spoon',
    'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
    'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'N/A', 'dining table', 'N/A',
    'toilet', 'N/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave',
    'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear',
    'hair drier', 'toothbrush'
]

def draw_boxes(image, boxes, labels, scores, threshold=0.5):
    """
    Draws bounding boxes and labels on the image with enhanced visualization.
    """
    for i, box in enumerate(boxes):
        if scores[i] >= threshold:
            label = COCO_INSTANCE_CATEGORY_NAMES[labels[i]]
            score = scores[i]
            color = (np.random.randint(0, 255), np.random.randint(0, 255), np.random.randint(0, 255))

            start_point = (int(box[0]), int(box[1]))
            end_point = (int(box[2]), int(box[3]))

            cv2.rectangle(image, start_point, end_point, color, 2)

            text = f"{label}: {score:.2f}"
            font_scale = 0.4
            font_thickness = 1
            label_size = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, font_scale, font_thickness)[0]

            label_background = (start_point[0], start_point[1] - label_size[1] - 5)
            label_end = (start_point[0] + label_size[0], start_point[1])
            cv2.rectangle(image, label_background, label_end, color, -1)

            cv2.putText(image, text, (start_point[0], start_point[1] - 5), cv2.FONT_HERSHEY_SIMPLEX, font_scale, (255, 255, 255), font_thickness)

    return image

def detect_objects(image_path, confidence_threshold=0.5):
    """
    Detects objects in the image and returns the image with bounding boxes and labels.
    """
    start_time = time.time()

    image = cv2.imread(image_path)

    if image is None:
        print(f"Error: Could not load image from {image_path}. Please check the file path and ensure the image exists.")
        return None

    original_image = image.copy()
    image_tensor = F.to_tensor(image).unsqueeze(0)

    with torch.no_grad():
        prediction = model(image_tensor)

    end_time = time.time()
    inference_time = end_time - start_time
    print(f"Inference time: {inference_time:.2f} seconds")

    boxes = prediction[0]['boxes'].cpu().numpy()
    labels = prediction[0]['labels'].cpu().numpy()
    scores = prediction[0]['scores'].cpu().numpy()

    detected_image = draw_boxes(original_image, boxes, labels, scores, threshold=confidence_threshold)

    return detected_image

if __name__ == "__main__":
    image_path = '/content/coco.png'

    detected_image = detect_objects(image_path, confidence_threshold=0.5)

    if detected_image is not None:
        cv2_imshow(detected_image)
        print("Object detection complete. Image displayed.")
    else:
        print("No image to display.")



#Inference time
#Different color box
