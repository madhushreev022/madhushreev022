import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense
import matplotlib.pyplot as plt

# Generate synthetic time-series data (e.g., sine wave for regression example)
def generate_time_series_data(n_samples, timesteps):
    # Create synthetic time-series data (e.g., sine wave + noise)
    x = np.linspace(0, n_samples, n_samples)
    y = np.sin(x) + 0.1 * np.random.randn(n_samples) 

    x_seq = []
    y_seq = []

    for i in range(len(y) - timesteps):
        x_seq.append(y[i:i+timesteps])
        y_seq.append(y[i+timesteps]) 
    return np.array(x_seq), np.array(y_seq)

n_samples = 1000
timesteps = 30  
input_dim = 1  

x_data, y_data = generate_time_series_data(n_samples, timesteps)

x_data = np.reshape(x_data, (x_data.shape[0], timesteps, input_dim))

train_size = int(len(x_data) * 0.8)
x_train, x_test = x_data[:train_size], x_data[train_size:]
y_train, y_test = y_data[:train_size], y_data[train_size:]

model = Sequential([
    SimpleRNN(128, input_shape=(timesteps, input_dim), activation='relu'),
    Dense(64, activation='relu'),
    Dense(1)  
])

model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])

model.fit(x_train, y_train, epochs=20, batch_size=64, validation_data=(x_test, y_test))

test_loss, test_mae = model.evaluate(x_test, y_test)
print(f"Test Loss: {test_loss:.4f}, Test MAE: {test_mae:.4f}")

predictions = model.predict(x_test)

plt.figure(figsize=(10, 6))
plt.plot(y_test, label='Actual')
plt.plot(predictions, label='Predicted')
plt.title('Time-Series Prediction (Actual vs Predicted)')
plt.legend()
plt.show()



#For time series data
