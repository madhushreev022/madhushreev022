import numpy as np

def unit_step(x):
    """Unit step activation function for batch processing."""
    return (x >= 0).astype(int)

def perceptron_model(x, w, b):
    """Perceptron model that computes the output for a batch of inputs."""
    v = np.dot(x, w) + b  # Dot product to handle batches
    y = unit_step(v)
    return y

def logic_gate(x, gate_type):
    """Compute the output of specified logic gates for a batch of inputs."""
    if gate_type == 'NOT':
        w = -1
        b = 0.5
        return perceptron_model(x, w, b)
    elif gate_type == 'AND':
        w = np.array([1, 1])
        b = -1.5
        return perceptron_model(x, w, b)
    elif gate_type == 'OR':
        w = np.array([1, 1])
        b = -0.5
        return perceptron_model(x, w, b)
    elif gate_type == 'XOR':
        y1 = logic_gate(x, 'AND')
        y2 = logic_gate(x, 'OR')
        y3 = logic_gate(y1, 'NOT')
        final_x = np.vstack((y2, y3)).T
        return logic_gate(final_x, 'AND')
    else:
        raise ValueError("Invalid gate type. Choose from: 'NOT', 'AND', 'OR', 'XOR'.")

def test_logic_gates(gate_types, test_cases):
    """Test multiple logic gates with a batch of inputs."""
    for gate in gate_types:
        results = logic_gate(test_cases, gate)
        for i, x in enumerate(test_cases):
            print(f"{gate} gate({x[0]},{x[1]}) = {results[i]}")

# Create a batch of test cases
test_cases = np.array([[0, 1], [1, 1], [0, 0], [1, 0]])

# Testing multiple gates
gate_types = ['AND', 'OR', 'XOR']
test_logic_gates(gate_types, test_cases)

# Testing NOT gate separately
print("\nTesting NOT gate on individual inputs:")
for x in test_cases:
    print(f"NOT gate({x[0]}) = {logic_gate(np.array([x[0]]), 'NOT')}")
